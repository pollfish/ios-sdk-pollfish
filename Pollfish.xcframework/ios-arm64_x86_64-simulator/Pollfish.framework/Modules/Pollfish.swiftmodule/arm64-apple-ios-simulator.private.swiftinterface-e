// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Pollfish
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVKit
import AdSupport
import CoreTelephony
import Foundation
@_exported import Pollfish
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@objc public class RewardInfo : ObjectiveC.NSObject {
  final public let rewardName: Swift.String
  final public let rewardConversion: Swift.Double
  @objc public init?(rewardName: Swift.String, rewardConversion: Swift.Double)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
public typealias SpokenLanguages = [Pollfish.SpokenLanguage]
@_inheritsConvenienceInitializers @objc public class UserProperties : ObjectiveC.NSObject {
  public var gender: Pollfish.Gender?
  public var yearOfBirth: Swift.Int?
  public var maritalStatus: Pollfish.MaritalStatus?
  public var parental: Pollfish.Parental?
  public var education: Pollfish.Education?
  public var employment: Pollfish.Employment?
  public var career: Pollfish.Career?
  public var race: Pollfish.Race?
  public var income: Pollfish.Income?
  public var spokenLanguages: Pollfish.SpokenLanguages?
  public var organizationRole: Pollfish.OrganizationRole?
  public var numberOfEmployees: Pollfish.NumberOfEmployees?
  public var postalData: Swift.String?
  public var customAttributes: [Swift.String : Swift.String]
  @discardableResult
  @objc public func gender(_ gender: Pollfish.Gender) -> Pollfish.UserProperties
  @discardableResult
  @objc public func yearOfBirth(_ yearOfBirth: Swift.Int) -> Pollfish.UserProperties
  @discardableResult
  @objc public func maritalStatus(_ maritalStatus: Pollfish.MaritalStatus) -> Pollfish.UserProperties
  @discardableResult
  @objc public func parental(_ parental: Pollfish.Parental) -> Pollfish.UserProperties
  @discardableResult
  @objc public func education(_ education: Pollfish.Education) -> Pollfish.UserProperties
  @discardableResult
  @objc public func employment(_ employment: Pollfish.Employment) -> Pollfish.UserProperties
  @discardableResult
  @objc public func career(_ career: Pollfish.Career) -> Pollfish.UserProperties
  @discardableResult
  @objc public func race(_ race: Pollfish.Race) -> Pollfish.UserProperties
  @discardableResult
  @objc public func income(_ income: Pollfish.Income) -> Pollfish.UserProperties
  @discardableResult
  @objc public func spokenLanguages(_ spokenLanguages: Foundation.NSArray) -> Pollfish.UserProperties
  @discardableResult
  @objc public func organizationRole(_ organizationRole: Pollfish.OrganizationRole) -> Pollfish.UserProperties
  @discardableResult
  @objc public func numberOfEmployees(_ numberOfEmployees: Pollfish.NumberOfEmployees) -> Pollfish.UserProperties
  @discardableResult
  @objc public func postalData(_ postalData: Swift.String) -> Pollfish.UserProperties
  @discardableResult
  @objc public func customAttribute(_ value: Swift.String, forKey: Swift.String) -> Pollfish.UserProperties
  @objc override dynamic public init()
  public init(_ userProperties: [Pollfish.UserProperty])
  @objc deinit
}
@objc public enum Gender : Swift.Int {
  case female = 1
  case male = 2
  case other = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MaritalStatus : Swift.Int {
  case single = 0
  case married = 1
  case divorced = 2
  case livingWithParent = 3
  case separated = 4
  case widowed = 5
  case preferNotToSay = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Parental : Swift.Int {
  case zero = 0
  case one = 1
  case two = 2
  case three = 3
  case four = 4
  case five = 5
  case sixOrMore = 6
  case preferNotToSay = 7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Education : Swift.Int {
  case elementarySchool = 0
  case middleSchool = 1
  case highSchool = 2
  case vocationalTechnicalCollege = 3
  case university = 4
  case postGraduate = 5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Employment : Swift.Int {
  case employedForWages = 0
  case selfEmployed = 1
  case unemployedLooking = 2
  case unemployedNotLooking = 3
  case homemaker = 4
  case student = 5
  case military = 6
  case retired = 7
  case unableToWork = 8
  case other = 9
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Career : Swift.Int {
  case agricultureForesrtyFishingOrHunting = 0
  case artsEntetainmentOrRecreation = 1
  case broadcasting = 2
  case construction = 3
  case education = 4
  case financeAndInsurance = 5
  case governmentAndPublicAdministration = 6
  case healthCareAndSocialAssistance = 7
  case homemaker = 8
  case hotelAndFoodServices = 9
  case informationOther = 10
  case informationServicesAndData = 11
  case legalServices = 12
  case manufacturingComputerAndElectronics = 13
  case manufacturingOther = 14
  case military = 15
  case mining = 16
  case processing = 17
  case publishing = 18
  case realEstateRentalOrLeasing = 19
  case religious = 20
  case retail = 21
  case retired = 22
  case scientificOrTechnicalServices = 23
  case software = 24
  case student = 25
  case telecommunications = 26
  case transportAndWarehousing = 27
  case unemployed = 28
  case energyUtilitiesOilAndGas = 29
  case wholesale = 30
  case other = 31
  case advertising = 32
  case automotive = 33
  case consulting = 34
  case fashionApparel = 35
  case humanResources = 36
  case marketResearch = 37
  case marketingSales = 38
  case shippingDistribution = 39
  case personalServices = 40
  case security = 41
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Race : Swift.Int {
  case arab = 0
  case asian = 1
  case black = 2
  case white = 3
  case hispanic = 4
  case latino = 5
  case multiracial = 6
  case other = 7
  case preferNotToSay = 8
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum Income : Swift.Int {
  case lowerI = 0
  case lowerII = 1
  case middleI = 2
  case middleII = 3
  case highI = 4
  case highII = 5
  case highIII = 6
  case preferNotToSay = 7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SpokenLanguage : Swift.Int {
  case english = 0
  case arabic = 1
  case bulgarian = 2
  case chinese = 3
  case czech = 4
  case danish = 5
  case dutch = 6
  case filipino = 7
  case thai = 8
  case finnish = 9
  case french = 10
  case german = 11
  case greek = 12
  case hindi = 13
  case indonesian = 14
  case italian = 15
  case japanese = 16
  case polish = 17
  case portuguese = 18
  case romanian = 19
  case russian = 21
  case serbian = 22
  case spanish = 23
  case swedish = 24
  case turkish = 25
  case vietnamese = 26
  case korean = 27
  case hungarian = 28
  case chineseTraditional = 29
  case norwegian = 30
  case egyptian = 31
  case ukrainian = 32
  case hebrew = 33
  case bengali = 34
  case slovak = 35
  case persian = 36
  case azerbaijani = 37
  case georgian = 38
  case lithuanian = 39
  case punjabi = 40
  case pashto = 41
  case estonian = 42
  case uzbek = 43
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum OrganizationRole : Swift.Int {
  case ownerPartner = 0
  case presidentCeoChairperson = 1
  case cLevelExecutive = 2
  case middleMangement = 3
  case chiefFinancialOfficer = 4
  case chiefTechnicalOfficer = 5
  case seniorMangement = 6
  case director = 7
  case hrManagement = 8
  case productManager = 9
  case supplyManagement = 10
  case projectManagement = 11
  case salesManager = 12
  case businessAdministrator = 13
  case supervisor = 14
  case administrativeClerical = 15
  case craftsman = 16
  case foreman = 17
  case technicalStaff = 18
  case facultyStaff = 19
  case salesStatff = 20
  case buyerPurchasingAgent = 21
  case otherNonManagement = 22
  case notWork = 23
  case preferNotToSay = 24
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NumberOfEmployees : Swift.Int {
  case one = 0
  case twoToFive = 1
  case sixToTen = 2
  case elevenToTwentyFive = 3
  case twentySixToFifty = 4
  case fiftyOneToHundrend = 5
  case hundrendOneToTwoHundrendsFifty = 6
  case twoHundrendsFiftyOneToFiveHundrends = 7
  case fiveHundrendsOneToThousand = 8
  case thousandOneToFiveThousands = 9
  case greaterThanFiveThousands = 10
  case doNotWork = 11
  case preferNotToSay = 12
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum UserProperty : Swift.Equatable {
  case gender(Pollfish.Gender)
  case yearOfBirth(Swift.Int)
  case maritalStatus(Pollfish.MaritalStatus)
  case parental(Pollfish.Parental)
  case education(Pollfish.Education)
  case employment(Pollfish.Employment)
  case career(Pollfish.Career)
  case race(Pollfish.Race)
  case income(Pollfish.Income)
  case spokenLanguages(Pollfish.SpokenLanguages)
  case organizationRole(Pollfish.OrganizationRole)
  case numberOfEmployees(Pollfish.NumberOfEmployees)
  case postalData(Swift.String)
  case customProperty(Swift.String, Swift.String)
  public static func == (a: Pollfish.UserProperty, b: Pollfish.UserProperty) -> Swift.Bool
}
@_hasMissingDesignatedInitializers @objc public class SurveyInfo : ObjectiveC.NSObject {
  @objc final public let cpa: Foundation.NSNumber?
  @objc final public let loi: Foundation.NSNumber?
  @objc final public let ir: Foundation.NSNumber?
  @objc final public let surveyClass: Swift.String?
  @objc final public let rewardName: Swift.String?
  @objc final public let rewardValue: Foundation.NSNumber?
  @objc final public let remainingCompletes: Foundation.NSNumber?
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class PollfishParams : ObjectiveC.NSObject {
  final public let apiKey: Swift.String
  public var rewardMode: Swift.Bool {
    get
  }
  public var releaseMode: Swift.Bool {
    get
  }
  public var offerwallMode: Swift.Bool {
    get
  }
  public var requestUUID: Swift.String? {
    get
  }
  public var surveyFormat: Pollfish.SurveyFormat? {
    get
  }
  public var userProperties: Pollfish.UserProperties? {
    get
  }
  public var indicatorPosition: Pollfish.IndicatorPosition {
    get
  }
  public var indicatorPadding: Swift.Int {
    get
  }
  public var viewContainer: UIKit.UIView? {
    get
  }
  public var rewardInfo: Pollfish.RewardInfo? {
    get
  }
  public var signature: Swift.String? {
    get
  }
  public var clickId: Swift.String? {
    get
  }
  public var userId: Swift.String? {
    get
  }
  public var platform: Pollfish.Platform? {
    get
  }
  public var monitorOrientationChanges: Swift.Bool {
    get
  }
  @objc public init(_ apiKey: Swift.String)
  @discardableResult
  @objc public func rewardMode(_ rewardMode: Swift.Bool) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func releaseMode(_ releaseMode: Swift.Bool) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func offerwallMode(_ offerwallMode: Swift.Bool) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func requestUUID(_ requestUUID: Swift.String) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func surveyFormat(_ surveyFormat: Pollfish.SurveyFormat) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func userProperties(_ userProperties: Pollfish.UserProperties) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func indicatorPosition(_ indicatorPosition: Pollfish.IndicatorPosition) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func indicatorPadding(_ indicatorPadding: Swift.Int) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func viewContainer(_ viewContainer: UIKit.UIView) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func rewardInfo(_ rewardInfo: Pollfish.RewardInfo) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func signature(_ signature: Swift.String) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func clickId(_ clickId: Swift.String) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func userId(_ userId: Swift.String) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func platform(_ platform: Pollfish.Platform) -> Pollfish.PollfishParams
  @discardableResult
  @objc public func monitorOrientationChanges(_ monitorOrientationChanges: Swift.Bool) -> Pollfish.PollfishParams
  @objc deinit
}
@objc public enum SurveyFormat : Swift.Int {
  case basic = 0
  case playful = 1
  case random = 2
  case thirdParty = 3
  case `internal` = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class Pollfish : ObjectiveC.NSObject {
  @objc deinit
}
extension Pollfish.Pollfish {
  @objc public static func initWith(_ params: Pollfish.PollfishParams, delegate: (any Pollfish.PollfishDelegate)? = nil)
  @objc public static func show()
  @objc public static func hide()
  @objc public static func isPollfishPresent() -> Swift.Bool
  @objc public static func isPollfishPanelOpen() -> Swift.Bool
}
@objc public enum IndicatorPosition : Swift.Int {
  case topLeft
  case topRight
  case middleLeft
  case middleRight
  case bottomLeft
  case bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PollfishDelegate {
  @objc optional func pollfishOpened()
  @objc optional func pollfishClosed()
  @objc optional func pollfishSurveyReceived(surveyInfo: Pollfish.SurveyInfo?)
  @objc optional func pollfishSurveyCompleted(surveyInfo: Pollfish.SurveyInfo)
  @objc optional func pollfishSurveyNotAvailable()
  @objc optional func pollfishUserRejectedSurvey()
  @objc optional func pollfishUserNotEligible()
}
@objc public enum Platform : Swift.Int, Swift.CustomStringConvertible {
  case native = 0
  case flutter = 1
  case cordova = 2
  case unity = 3
  case adMob = 4
  case moPub = 5
  case reactNative = 6
  case max = 7
  case ironSource = 8
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension UIKit.UIDeviceOrientation : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension UIKit.UIInterfaceOrientation : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Pollfish.Gender : Swift.Equatable {}
extension Pollfish.Gender : Swift.Hashable {}
extension Pollfish.Gender : Swift.RawRepresentable {}
extension Pollfish.MaritalStatus : Swift.Equatable {}
extension Pollfish.MaritalStatus : Swift.Hashable {}
extension Pollfish.MaritalStatus : Swift.RawRepresentable {}
extension Pollfish.Parental : Swift.Equatable {}
extension Pollfish.Parental : Swift.Hashable {}
extension Pollfish.Parental : Swift.RawRepresentable {}
extension Pollfish.Education : Swift.Equatable {}
extension Pollfish.Education : Swift.Hashable {}
extension Pollfish.Education : Swift.RawRepresentable {}
extension Pollfish.Employment : Swift.Equatable {}
extension Pollfish.Employment : Swift.Hashable {}
extension Pollfish.Employment : Swift.RawRepresentable {}
extension Pollfish.Career : Swift.Equatable {}
extension Pollfish.Career : Swift.Hashable {}
extension Pollfish.Career : Swift.RawRepresentable {}
extension Pollfish.Race : Swift.Equatable {}
extension Pollfish.Race : Swift.Hashable {}
extension Pollfish.Race : Swift.RawRepresentable {}
extension Pollfish.Income : Swift.Equatable {}
extension Pollfish.Income : Swift.Hashable {}
extension Pollfish.Income : Swift.RawRepresentable {}
extension Pollfish.SpokenLanguage : Swift.Equatable {}
extension Pollfish.SpokenLanguage : Swift.Hashable {}
extension Pollfish.SpokenLanguage : Swift.RawRepresentable {}
extension Pollfish.OrganizationRole : Swift.Equatable {}
extension Pollfish.OrganizationRole : Swift.Hashable {}
extension Pollfish.OrganizationRole : Swift.RawRepresentable {}
extension Pollfish.NumberOfEmployees : Swift.Equatable {}
extension Pollfish.NumberOfEmployees : Swift.Hashable {}
extension Pollfish.NumberOfEmployees : Swift.RawRepresentable {}
extension Pollfish.SurveyFormat : Swift.Equatable {}
extension Pollfish.SurveyFormat : Swift.Hashable {}
extension Pollfish.SurveyFormat : Swift.RawRepresentable {}
extension Pollfish.IndicatorPosition : Swift.Equatable {}
extension Pollfish.IndicatorPosition : Swift.Hashable {}
extension Pollfish.IndicatorPosition : Swift.RawRepresentable {}
extension Pollfish.Platform : Swift.Equatable {}
extension Pollfish.Platform : Swift.Hashable {}
extension Pollfish.Platform : Swift.RawRepresentable {}
